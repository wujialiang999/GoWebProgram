package httputils

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
)

//AutoGenerated 为自动生成的go结构
type AutoGenerated struct {
	Status int `json:"status"`
	Data   struct {
		List []struct {
			Time         string  `json:"time"`
			Citycode     string  `json:"citycode"`
			Cityname     string  `json:"cityname"`
			Index        string  `json:"index"`
			LastIndex    string  `json:"last_index"`
			IndexLevel   int     `json:"index_level"`
			Speed        string  `json:"speed"`
			CityCoords   string  `json:"city_coords"`
			Provincecode int     `json:"provincecode"`
			Provincename string  `json:"provincename"`
			WeekRate     float64 `json:"weekRate"`
		} `json:"list"`
		Datetime string `json:"datetime"`
	} `json:"data"`
	Message interface{} `json:"message"`
}

//HTTPGet 获取GET数据
func HTTPGet(getURL string) {
	resp, err := http.Get(getURL)
	if err != nil {
		// handle error
	}

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// handle error
	}
	mydata := AutoGenerated{}
	//fmt.Println(string(body))
	if err = json.Unmarshal(body, &mydata); err != nil {
		fmt.Println(err)
	} else {
		//fmt.Printf("%+v\n", mydata)
		//fmt.Printf("%+v\n", mydata.Data.List)
		file, err := os.Create("hh.csv")
		//file, err := os.OpenFile("text.csv", os.O_CREATE|os.O_APPEND|os.O_RDWR, 0660)
		if err != nil {
			fmt.Println(err)
			return
		}
		defer file.Close()
		file.WriteString("\xEF\xBB\xBF")
		w := csv.NewWriter(file)
		// data := [][]string{
		// 	{"1", "中国", "23"},
		// 	{"2", "美国", "23"},
		// 	{"3", "法国", "23"},
		// 	{"4", "德国", "23"},
		// 	{"5", "日本", "23"},
		// }
		var data [][]string
		fmt.Println("success")
		for i := 0; i < len(mydata.Data.List); i++ {
			fmt.Printf("%v\n", mydata.Data.List[i])
			mydata := []string{mydata.Data.List[i].Time, mydata.Data.List[i].Citycode, mydata.Data.List[i].Cityname}
			data = append(data, mydata)
		}
		w.WriteAll(data) //写入数据
		w.Flush()
		fmt.Println("success")
	}

}

//CreateCSV 创建csv
func CreateCSV() {
	file, err := os.Create("hh.csv")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer file.Close()
	file.WriteString("\xEF\xBB\xBF")
	w := csv.NewWriter(file)
	data := [][]string{
		{"1", "中国", "23"},
		{"2", "美国", "23"},
		{"3", "法国", "23"},
		{"4", "德国", "23"},
		{"5", "日本", "23"},
	}
	w.WriteAll(data) //写入数据
	w.Flush()
	fmt.Println("success")
}

//GetCSV 获取CSV内容
func GetCSV() (citycodes []string) {
	fs, err := os.Open("hh.csv")
	if err != nil {
		return []string{"null"}
	}
	r := csv.NewReader(fs)
	//针对大文件，一行一行的读取文件
	for {
		row, err := r.Read()
		if err != nil && err != io.EOF {
			fmt.Printf("can not read, err is %+v\n", err)
		}
		if err == io.EOF {
			break
		}
		citycodes = append(citycodes, row[1])
		//fmt.Println(row)
	}
	return citycodes
}
